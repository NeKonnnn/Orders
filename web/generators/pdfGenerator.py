import datetime
import hashlib
import os

import pdfkit
import qrcode
from PIL import Image
from jinja2 import Environment, FileSystemLoader

from constants import get_absolute_path
from generators.baseGenerator import BaseGenerator
from helpers.packageDetector import find_wkhtmltopdf
from helpers.warningAndErrorBoxes import generate_message_box


class PDFGenerator(BaseGenerator):
    def __init__(self, app):
        super().__init__(app)
        self.app = app

    def generate_pdf_for_selected_row(self, merged_df):
        # set data in pdf template and save as not-editable pdf
        current_row = self.app.table_widget.currentRow()
        get_translation = self.app.translator.get_translation

        if current_row == -1:
            generate_message_box(self.app, translator=self.app.translator, text='no_row_selected', box_type='warning')
            return

        wkhtmltopdf_path = find_wkhtmltopdf()
        if wkhtmltopdf_path is None:
            generate_message_box(self.app, self.app.translator, 'no_package WKHTMLTOPDF!', box_type='error')
            return

        # Step 2: Get the selected row's ID
        current_row = self.app.table_widget.currentRow()
        if current_row == -1:
            generate_message_box(self.app, self.app.translator, 'no_row_selected', box_type='warning')
            return
        selected_id = self.app.table_widget.item(current_row, 0).text()

        # Get the name of the first column in the merged dataframe
        id_column_name = merged_df.columns[0]

        # Step 3: Filter the merged dataframe to get the row with the matching ID
        selected_row_df = merged_df[merged_df[id_column_name] == int(selected_id)]
        if selected_row_df.empty:
            generate_message_box(self.app, self.app.translator, 'no_matching_row_in_merged_data', box_type='warning')
            return

        # Step 4: Extract the data from this row
        row_data = selected_row_df.to_dict('records')
        row_data = [{str(key).replace('_', ' '): value for key, value in row.items()} for row in row_data]

        # Load the Jinja2 template
        env = Environment(loader=FileSystemLoader('.'))
        template = env.get_template('./styles/template.html')
        current_table = self.app.table_widget.property("current_table")  # Get the current table name

        # Get logo
        logo_path = get_absolute_path('./images/icon.png', add_file_prefix=False)
        logo = Image.open(logo_path)

        # taking base width
        basewidth = 250

        # adjust image size
        wpercent = (basewidth / float(logo.size[0]))
        hsize = int((float(logo.size[1]) * float(wpercent)))
        logo = logo.resize((basewidth, hsize))
        qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_H)

        # Generate QR Code
        qr.add_data(str(row_data))
        qr.make(fit=True)

        img = qr.make_image(fill_color="black", back_color="white")

        # set size of QR code
        pos = ((img.size[0] - logo.size[0]) // 2, (img.size[1] - logo.size[1]) // 2)
        img.paste(logo, pos)

        qr_code_path = "temp_qr_code.png"
        img.save(qr_code_path)

        # Data to be passed to the template
        data = {'title': get_translation('report_for_table') + ': "' + current_table + '"',
                'creator': get_translation('creator') + ': "' + self.app.user.login + '"',
                'date_of_creation': get_translation('date_of_creation') + ": " + datetime.datetime.now().strftime(
                    "%Y-%m-%d %H:%M:%S"), 'subtitle': get_translation('report_autogenerated'),
                'key_name': get_translation('key'), 'value_name': get_translation('value'), 'data': row_data,
                'icon': get_absolute_path('./images/icon.png'), 'qr_code': get_absolute_path(qr_code_path),
                'qr_code_hint_text': get_translation('qr_code_hint_text'), }

        # Render the template with the data
        html_content = template.render(**data)

        # Specify the output PDF file name
        output_pdf = f"reports/report.pdf"

        # Generate an SHA-256 hash of the data
        hash_object = hashlib.sha256(str(row_data).encode())
        hex_dig = hash_object.hexdigest()

        # Convert the HTML content to PDF
        config = pdfkit.configuration(
            wkhtmltopdf=wkhtmltopdf_path)  # r'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'
        pdfkit.from_string(html_content, output_pdf, configuration=config,
                           options={"enable-local-file-access": None, 'encoding': 'UTF-8',
                                    'footer-right': '[page] / [topage]', 'footer-left': 'SHA-256 hash: ' + hex_dig,
                                    'footer-font-size': '8', })

        # Delete the temporary QR code image
        os.remove(qr_code_path)
